{"ast":null,"code":"var _jsxFileName = \"/Users/ripplingadmin/dataroom/client/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Routes, Route, useNavigate, useLocation } from 'react-router-dom';\nimport Dataroom from './DataRoom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const navigate = useNavigate();\n  const location = useLocation();\n  const handleLoginClick = e => {\n    e.preventDefault();\n    window.location.href = 'http://localhost:3001/auth/google';\n  };\n  useEffect(() => {\n    // Check if the URL contains an authorization code\n    const params = new URLSearchParams(location.search);\n    const code = params.get('code');\n    if (code) {\n      // Make a POST request to exchange the code for an access token\n      // Example:\n      // axios.post('/exchange-code', { code })\n      //   .then(response => {\n      //     const authToken = response.data.authToken;\n      //     localStorage.setItem('authToken', authToken);\n      //     setIsAuthenticated(true);\n      //     navigate('/dataroom');\n      //   })\n      //   .catch(error => {\n      //     console.error('Error exchanging code:', error);\n      //   });\n\n      // For this example, we'll assume authentication is successful\n      localStorage.setItem('authToken', 'your-auth-token');\n      setIsAuthenticated(true);\n      navigate('/dataroom');\n    } else {\n      const storedToken = localStorage.getItem('authToken');\n      setIsAuthenticated(!!storedToken);\n    }\n  }, [location, navigate]);\n  if (!isAuthenticated) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"login-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Welcome to the Data Room\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please log in to continue.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleLoginClick,\n        children: \"Login with Google\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"data-room-container\",\n    children: [/*#__PURE__*/_jsxDEV(Dataroom, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Please log in to access the Data Room.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"nuSSr9XUG4Ck7fbUnC5qmU6X6Os=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","BrowserRouter","Router","Routes","Route","useNavigate","useLocation","Dataroom","jsxDEV","_jsxDEV","App","_s","isAuthenticated","setIsAuthenticated","navigate","location","handleLoginClick","e","preventDefault","window","href","params","URLSearchParams","search","code","get","localStorage","setItem","storedToken","getItem","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/ripplingadmin/dataroom/client/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Routes, Route, useNavigate, useLocation } from 'react-router-dom';\nimport Dataroom from './DataRoom';\n\nfunction App() {\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  const handleLoginClick = (e) => {\n    e.preventDefault();\n    window.location.href = 'http://localhost:3001/auth/google';\n  };\n\n  useEffect(() => {\n    // Check if the URL contains an authorization code\n    const params = new URLSearchParams(location.search);\n    const code = params.get('code');\n\n    if (code) {\n      // Make a POST request to exchange the code for an access token\n      // Example:\n      // axios.post('/exchange-code', { code })\n      //   .then(response => {\n      //     const authToken = response.data.authToken;\n      //     localStorage.setItem('authToken', authToken);\n      //     setIsAuthenticated(true);\n      //     navigate('/dataroom');\n      //   })\n      //   .catch(error => {\n      //     console.error('Error exchanging code:', error);\n      //   });\n\n      // For this example, we'll assume authentication is successful\n      localStorage.setItem('authToken', 'your-auth-token');\n      setIsAuthenticated(true);\n      navigate('/dataroom');\n    } else {\n      const storedToken = localStorage.getItem('authToken');\n      setIsAuthenticated(!!storedToken);\n    }\n  }, [location, navigate]);\n\n  if (!isAuthenticated) {\n    return (\n      <div className=\"login-container\">\n        <h1>Welcome to the Data Room</h1>\n        <p>Please log in to continue.</p>\n        <button onClick={handleLoginClick}>Login with Google</button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"data-room-container\">\n      <Dataroom/>\n      {/* {isAuthenticated ? (\n        <Routes>\n          <Route path=\"/dataroom\" element={<Dataroom />} />\n          {/* Define other routes here */}\n        {/* </Routes> */}\n      {/* ) : ( */}\n        <p>Please log in to access the Data Room.</p>\n      {/* )} */} \n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,aAAa,IAAIC,MAAM,EAAEC,MAAM,EAAEC,KAAK,EAAEC,WAAW,EAAEC,WAAW,QAAQ,kBAAkB;AACnG,OAAOC,QAAQ,MAAM,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;EAC7D,MAAMe,QAAQ,GAAGT,WAAW,CAAC,CAAC;EAC9B,MAAMU,QAAQ,GAAGT,WAAW,CAAC,CAAC;EAE9B,MAAMU,gBAAgB,GAAIC,CAAC,IAAK;IAC9BA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClBC,MAAM,CAACJ,QAAQ,CAACK,IAAI,GAAG,mCAAmC;EAC5D,CAAC;EAEDpB,SAAS,CAAC,MAAM;IACd;IACA,MAAMqB,MAAM,GAAG,IAAIC,eAAe,CAACP,QAAQ,CAACQ,MAAM,CAAC;IACnD,MAAMC,IAAI,GAAGH,MAAM,CAACI,GAAG,CAAC,MAAM,CAAC;IAE/B,IAAID,IAAI,EAAE;MACR;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;;MAEA;MACAE,YAAY,CAACC,OAAO,CAAC,WAAW,EAAE,iBAAiB,CAAC;MACpDd,kBAAkB,CAAC,IAAI,CAAC;MACxBC,QAAQ,CAAC,WAAW,CAAC;IACvB,CAAC,MAAM;MACL,MAAMc,WAAW,GAAGF,YAAY,CAACG,OAAO,CAAC,WAAW,CAAC;MACrDhB,kBAAkB,CAAC,CAAC,CAACe,WAAW,CAAC;IACnC;EACF,CAAC,EAAE,CAACb,QAAQ,EAAED,QAAQ,CAAC,CAAC;EAExB,IAAI,CAACF,eAAe,EAAE;IACpB,oBACEH,OAAA;MAAKqB,SAAS,EAAC,iBAAiB;MAAAC,QAAA,gBAC9BtB,OAAA;QAAAsB,QAAA,EAAI;MAAwB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACjC1B,OAAA;QAAAsB,QAAA,EAAG;MAA0B;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eACjC1B,OAAA;QAAQ2B,OAAO,EAAEpB,gBAAiB;QAAAe,QAAA,EAAC;MAAiB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1D,CAAC;EAEV;EAEA,oBACE1B,OAAA;IAAKqB,SAAS,EAAC,qBAAqB;IAAAC,QAAA,gBAClCtB,OAAA,CAACF,QAAQ;MAAAyB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eAOT1B,OAAA;MAAAsB,QAAA,EAAG;IAAsC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAE5C,CAAC;AAEV;AAACxB,EAAA,CA9DQD,GAAG;EAAA,QAEOL,WAAW,EACXC,WAAW;AAAA;AAAA+B,EAAA,GAHrB3B,GAAG;AAgEZ,eAAeA,GAAG;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}