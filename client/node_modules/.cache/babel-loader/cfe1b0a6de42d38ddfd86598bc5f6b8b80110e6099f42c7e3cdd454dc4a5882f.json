{"ast":null,"code":"import React,{useState,useEffect}from'react';import{BrowserRouter as Router,Routes,Route,useNavigate,useLocation}from'react-router-dom';import Dataroom from'./DataRoom';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function App(){const[isAuthenticated,setIsAuthenticated]=useState(false);const navigate=useNavigate();const location=useLocation();const handleLoginClick=e=>{e.preventDefault();window.location.href='http://localhost:3001/auth/google';};useEffect(()=>{// Check if the URL contains an authorization code\nconst params=new URLSearchParams(location.search);const code=params.get('code');if(code){// Make a POST request to exchange the code for an access token\n// Example:\n// axios.post('/exchange-code', { code })\n//   .then(response => {\n//     const authToken = response.data.authToken;\n//     localStorage.setItem('authToken', authToken);\n//     setIsAuthenticated(true);\n//     navigate('/dataroom');\n//   })\n//   .catch(error => {\n//     console.error('Error exchanging code:', error);\n//   });\n// For this example, we'll assume authentication is successful\nlocalStorage.setItem('authToken','your-auth-token');setIsAuthenticated(true);navigate('/dataroom');}else{const storedToken=localStorage.getItem('authToken');setIsAuthenticated(!!storedToken);}},[location,navigate]);if(!isAuthenticated){return/*#__PURE__*/_jsxs(\"div\",{className:\"login-container\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Welcome to the Data Room\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Please log in to continue.\"}),/*#__PURE__*/_jsx(\"button\",{onClick:handleLoginClick,children:\"Login with Google\"})]});}return/*#__PURE__*/_jsx(\"div\",{className:\"data-room-container\",children:isAuthenticated?/*#__PURE__*/_jsx(Routes,{children:/*#__PURE__*/_jsx(Route,{path:\"/dataroom\",element:/*#__PURE__*/_jsx(Dataroom,{})})}):/*#__PURE__*/_jsx(\"p\",{children:\"Please log in to access the Data Room.\"})});}export default App;","map":{"version":3,"names":["React","useState","useEffect","BrowserRouter","Router","Routes","Route","useNavigate","useLocation","Dataroom","jsx","_jsx","jsxs","_jsxs","App","isAuthenticated","setIsAuthenticated","navigate","location","handleLoginClick","e","preventDefault","window","href","params","URLSearchParams","search","code","get","localStorage","setItem","storedToken","getItem","className","children","onClick","path","element"],"sources":["/Users/ripplingadmin/dataroom/client/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Routes, Route, useNavigate, useLocation } from 'react-router-dom';\nimport Dataroom from './DataRoom';\n\nfunction App() {\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  const handleLoginClick = (e) => {\n    e.preventDefault();\n    window.location.href = 'http://localhost:3001/auth/google';\n  };\n\n  useEffect(() => {\n    // Check if the URL contains an authorization code\n    const params = new URLSearchParams(location.search);\n    const code = params.get('code');\n\n    if (code) {\n      // Make a POST request to exchange the code for an access token\n      // Example:\n      // axios.post('/exchange-code', { code })\n      //   .then(response => {\n      //     const authToken = response.data.authToken;\n      //     localStorage.setItem('authToken', authToken);\n      //     setIsAuthenticated(true);\n      //     navigate('/dataroom');\n      //   })\n      //   .catch(error => {\n      //     console.error('Error exchanging code:', error);\n      //   });\n\n      // For this example, we'll assume authentication is successful\n      localStorage.setItem('authToken', 'your-auth-token');\n      setIsAuthenticated(true);\n      navigate('/dataroom');\n    } else {\n      const storedToken = localStorage.getItem('authToken');\n      setIsAuthenticated(!!storedToken);\n    }\n  }, [location, navigate]);\n\n  if (!isAuthenticated) {\n    return (\n      <div className=\"login-container\">\n        <h1>Welcome to the Data Room</h1>\n        <p>Please log in to continue.</p>\n        <button onClick={handleLoginClick}>Login with Google</button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"data-room-container\">\n      {isAuthenticated ? (\n        <Routes>\n          <Route path=\"/dataroom\" element={<Dataroom />} />\n          {/* Define other routes here */}\n        </Routes>\n      ) : (\n        <p>Please log in to access the Data Room.</p>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAClD,OAASC,aAAa,GAAI,CAAAC,MAAM,CAAEC,MAAM,CAAEC,KAAK,CAAEC,WAAW,CAAEC,WAAW,KAAQ,kBAAkB,CACnG,MAAO,CAAAC,QAAQ,KAAM,YAAY,CAAC,OAAAC,GAAA,IAAAC,IAAA,gCAAAC,IAAA,IAAAC,KAAA,yBAElC,QAAS,CAAAC,GAAGA,CAAA,CAAG,CACb,KAAM,CAACC,eAAe,CAAEC,kBAAkB,CAAC,CAAGf,QAAQ,CAAC,KAAK,CAAC,CAC7D,KAAM,CAAAgB,QAAQ,CAAGV,WAAW,CAAC,CAAC,CAC9B,KAAM,CAAAW,QAAQ,CAAGV,WAAW,CAAC,CAAC,CAE9B,KAAM,CAAAW,gBAAgB,CAAIC,CAAC,EAAK,CAC9BA,CAAC,CAACC,cAAc,CAAC,CAAC,CAClBC,MAAM,CAACJ,QAAQ,CAACK,IAAI,CAAG,mCAAmC,CAC5D,CAAC,CAEDrB,SAAS,CAAC,IAAM,CACd;AACA,KAAM,CAAAsB,MAAM,CAAG,GAAI,CAAAC,eAAe,CAACP,QAAQ,CAACQ,MAAM,CAAC,CACnD,KAAM,CAAAC,IAAI,CAAGH,MAAM,CAACI,GAAG,CAAC,MAAM,CAAC,CAE/B,GAAID,IAAI,CAAE,CACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACAE,YAAY,CAACC,OAAO,CAAC,WAAW,CAAE,iBAAiB,CAAC,CACpDd,kBAAkB,CAAC,IAAI,CAAC,CACxBC,QAAQ,CAAC,WAAW,CAAC,CACvB,CAAC,IAAM,CACL,KAAM,CAAAc,WAAW,CAAGF,YAAY,CAACG,OAAO,CAAC,WAAW,CAAC,CACrDhB,kBAAkB,CAAC,CAAC,CAACe,WAAW,CAAC,CACnC,CACF,CAAC,CAAE,CAACb,QAAQ,CAAED,QAAQ,CAAC,CAAC,CAExB,GAAI,CAACF,eAAe,CAAE,CACpB,mBACEF,KAAA,QAAKoB,SAAS,CAAC,iBAAiB,CAAAC,QAAA,eAC9BvB,IAAA,OAAAuB,QAAA,CAAI,0BAAwB,CAAI,CAAC,cACjCvB,IAAA,MAAAuB,QAAA,CAAG,4BAA0B,CAAG,CAAC,cACjCvB,IAAA,WAAQwB,OAAO,CAAEhB,gBAAiB,CAAAe,QAAA,CAAC,mBAAiB,CAAQ,CAAC,EAC1D,CAAC,CAEV,CAEA,mBACEvB,IAAA,QAAKsB,SAAS,CAAC,qBAAqB,CAAAC,QAAA,CACjCnB,eAAe,cACdJ,IAAA,CAACN,MAAM,EAAA6B,QAAA,cACLvB,IAAA,CAACL,KAAK,EAAC8B,IAAI,CAAC,WAAW,CAACC,OAAO,cAAE1B,IAAA,CAACF,QAAQ,GAAE,CAAE,CAAE,CAAC,CAE3C,CAAC,cAETE,IAAA,MAAAuB,QAAA,CAAG,wCAAsC,CAAG,CAC7C,CACE,CAAC,CAEV,CAEA,cAAe,CAAApB,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}