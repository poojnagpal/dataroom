{"ast":null,"code":"import React,{useState,useEffect}from'react';import{BrowserRouter as Router,Routes,Route,useNavigate,useLocation}from'react-router-dom';import Dataroom from'./DataRoom';import{jsx as _jsx}from\"react/jsx-runtime\";function App(){// const [isAuthenticated, setIsAuthenticated] = useState(false);\n// const navigate = useNavigate();\n// const location = useLocation();\n// const handleLoginClick = (e) => {\n//   e.preventDefault();\n//   window.location.href = 'http://localhost:3001/auth/google';\n// };\n// useEffect(() => {\n//   // Check if the URL contains an authorization code\n//   const params = new URLSearchParams(location.search);\n//   const code = params.get('code');\n//   if (code) {\n//     // Make a POST request to exchange the code for an access token\n//     // Example:\n//     // axios.post('/exchange-code', { code })\n//     //   .then(response => {\n//     //     const authToken = response.data.authToken;\n//     //     localStorage.setItem('authToken', authToken);\n//     //     setIsAuthenticated(true);\n//     //     navigate('/dataroom');\n//     //   })\n//     //   .catch(error => {\n//     //     console.error('Error exchanging code:', error);\n//     //   });\n//     // For this example, we'll assume authentication is successful\n//     localStorage.setItem('authToken', 'your-auth-token');\n//     setIsAuthenticated(true);\n//     navigate('/dataroom');\n//   } else {\n//     const storedToken = localStorage.getItem('authToken');\n//     setIsAuthenticated(!!storedToken);\n//   }\n// }, [location, navigate]);\n// if (!isAuthenticated) {\n//   return (\n//     <div className=\"login-container\">\n//       <h1>Welcome to the Data Room</h1>\n//       <p>Please log in to continue.</p>\n//       <button onClick={handleLoginClick}>Login with Google</button>\n//     </div>\n//   );\n// }\nreturn/*#__PURE__*/_jsx(\"div\",{className:\"data-room-container\",children:/*#__PURE__*/_jsx(Dataroom,{})});}export default App;","map":{"version":3,"names":["React","useState","useEffect","BrowserRouter","Router","Routes","Route","useNavigate","useLocation","Dataroom","jsx","_jsx","App","className","children"],"sources":["/Users/ripplingadmin/dataroom/client/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Routes, Route, useNavigate, useLocation } from 'react-router-dom';\nimport Dataroom from './DataRoom';\n\nfunction App() {\n  // const [isAuthenticated, setIsAuthenticated] = useState(false);\n  // const navigate = useNavigate();\n  // const location = useLocation();\n\n  // const handleLoginClick = (e) => {\n  //   e.preventDefault();\n  //   window.location.href = 'http://localhost:3001/auth/google';\n  // };\n\n  // useEffect(() => {\n  //   // Check if the URL contains an authorization code\n  //   const params = new URLSearchParams(location.search);\n  //   const code = params.get('code');\n\n  //   if (code) {\n  //     // Make a POST request to exchange the code for an access token\n  //     // Example:\n  //     // axios.post('/exchange-code', { code })\n  //     //   .then(response => {\n  //     //     const authToken = response.data.authToken;\n  //     //     localStorage.setItem('authToken', authToken);\n  //     //     setIsAuthenticated(true);\n  //     //     navigate('/dataroom');\n  //     //   })\n  //     //   .catch(error => {\n  //     //     console.error('Error exchanging code:', error);\n  //     //   });\n\n  //     // For this example, we'll assume authentication is successful\n  //     localStorage.setItem('authToken', 'your-auth-token');\n  //     setIsAuthenticated(true);\n  //     navigate('/dataroom');\n  //   } else {\n  //     const storedToken = localStorage.getItem('authToken');\n  //     setIsAuthenticated(!!storedToken);\n  //   }\n  // }, [location, navigate]);\n\n  // if (!isAuthenticated) {\n  //   return (\n  //     <div className=\"login-container\">\n  //       <h1>Welcome to the Data Room</h1>\n  //       <p>Please log in to continue.</p>\n  //       <button onClick={handleLoginClick}>Login with Google</button>\n  //     </div>\n  //   );\n  // }\n\n  return (\n    <div className=\"data-room-container\">\n      <Dataroom/>\n      {/* {isAuthenticated ? (\n        <Routes>\n          <Route path=\"/dataroom\" element={<Dataroom />} />\n          {/* Define other routes here */}\n        {/* </Routes> */}\n      {/* ) : ( */}\n        {/* <p>Please log in to access the Data Room.</p> */}\n      {/* )} */} \n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAClD,OAASC,aAAa,GAAI,CAAAC,MAAM,CAAEC,MAAM,CAAEC,KAAK,CAAEC,WAAW,CAAEC,WAAW,KAAQ,kBAAkB,CACnG,MAAO,CAAAC,QAAQ,KAAM,YAAY,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAElC,QAAS,CAAAC,GAAGA,CAAA,CAAG,CACb;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,mBACED,IAAA,QAAKE,SAAS,CAAC,qBAAqB,CAAAC,QAAA,cAClCH,IAAA,CAACF,QAAQ,GAAC,CAAC,CASR,CAAC,CAEV,CAEA,cAAe,CAAAG,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}